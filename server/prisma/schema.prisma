generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
 
}
 
model LotInfo {
  id                 Int       @id @default(autoincrement())
  lot_initial_weight Float?
  scarpDate          String 
  master_id          Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  MasterProcess      MasterProcess? @relation(fields: [master_id], references: [id])
  items              Item[]    @relation("LotItems") 
  AttributeValues    AttributeValue[]
  ScarpInfo          ScarpInfo[]
 
  @@map("lotInfo")
}
model CustomerInfo {
  customer_id        Int    @id @default(autoincrement())
  customer_name      String
  customer_shop_name String?
  phone_number       String?
  address            String?
  MasterOrders       MasterOrder[]
  MasterJewelTypeCustomerValue MasterJewelTypeCustomerValue[]
  ClosingBalance     ClosingBalance[]
  Balance            Balance[]
  receipts           Receipt[]
  customerBalance    CustomerBalance[]
 
  @@map("customerInfo")
}
 
model MasterProcess {
  id                 Int      @id @default(autoincrement())
  process_name       String
  LotInfos           LotInfo[]       
  MasterProcessMappers MasterProcessMapper[]
  ProcessSteps       ProcessSteps[]   
 
  @@map("masterProcess")
}
 
model MasterProcessMapper {
  id                 Int       @id @default(autoincrement())
  master_id          Int
  process_id         Int
  process_order_sort Int
 
  MasterProcess      MasterProcess @relation(fields: [master_id], references: [id])
  LotProcess         LotProcess    @relation(fields: [process_id], references: [id])
 
  @@map("masterProcessMapper")
}
 
model AttributeInfo {
  attribute_id      Int      @id @default(autoincrement())
  attribute_type    String
  attribute_name    String
  ProcessSteps      ProcessSteps[]     
  AttributeValues   AttributeValue[]  
 
  @@map("attributeInfo")
}
 
model LotProcess {
  id                   Int               @id @default(autoincrement())
  process_name         String
  process_description  String?
 
  MasterProcessMappers MasterProcessMapper[] 
  ProcessSteps         ProcessSteps[]    
 
  @@map("LotProcess")
}
 
model ProcessSteps {
  id                Int          @id @default(autoincrement())
  process_id        Int
  attribute_id      Int
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
 
  LotProcess        LotProcess   @relation(fields: [process_id], references: [id])
  AttributeInfo     AttributeInfo @relation(fields: [attribute_id], references: [attribute_id])  
  master            MasterProcess[]
 
  AttributeValues   AttributeValue[] @relation("ProcessStepsToAttributeValue")
 
  @@map("processSteps")
}
 
model AttributeValue {
  id              Int         @id @default(autoincrement())
  lot_id          Int?
  attribute_id    Int
  items_id        Int?         
  value           Float?
  touchValue      Float?
  item_name       String?
  process_step_id Int    
 
  LotInfo         LotInfo?      @relation(fields: [lot_id], references: [id])
  Item            Item?         @relation(fields: [items_id], references: [item_id])  
  AttributeInfo   AttributeInfo @relation(fields: [attribute_id], references: [attribute_id])
  ProcessSteps    ProcessSteps  @relation(fields: [process_step_id], references: [id], name: "ProcessStepsToAttributeValue")
 
  @@map("attributeValue")
}
 
 
model Item {
  item_id        Int     @id @default(autoincrement())
  lot_id         Int
  item_type      String?
  LotInfo        LotInfo @relation("LotItems", fields: [lot_id], references: [id])  
  AttributeValues AttributeValue[] 
  ProductStocks  ProductStocks[]  
  MasterJewelItemMapper MasterJewelItemMapper[]   
 
  @@map("item")
}
model ProductStocks {
  id              Int      @id @default(autoincrement())
  item_id         Int
  product_status  String
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())
 
  Item            Item     @relation(fields: [item_id], references: [item_id])  
  orderItems      OrderItem[]
  @@map("ProductStocks")
}
 
model MasterOrder {
  id                Int      @id @default(autoincrement())
  order_status      String
  customer_id       Int
  total_price       Float

  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
 
  CustomerInfo      CustomerInfo @relation(fields: [customer_id], references: [customer_id],onDelete: Cascade)  
  OrderItems        OrderItem[]
  Balance           Balance[]

 
  @@map("masterOrder")
}
 
model OrderItem {
  id            Int      @id @default(autoincrement())
  order_id      Int
  stock_id      Int
  itemName      String
  touchValue    Float
  productWeight Float
  final_price   Float
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  MasterOrder   MasterOrder @relation(fields: [order_id], references: [id],onDelete: Cascade)
  ProductStocks ProductStocks @relation(fields: [stock_id], references: [id])

  @@map("orderItems")
}
model MasterJewelType {
  master_jewel_id    Int      @id @default(autoincrement())
  jewel_name         String
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  MasterJewelTypeCustomerValue MasterJewelTypeCustomerValue[]
  MasterJewelItemMapper MasterJewelItemMapper[]
 
  @@map("master_jewel_type") 
}
 
model MasterJewelTypeCustomerValue {
  id                Int      @id @default(autoincrement())
  customer_id       Int
  masterJewel_id    Int
  value             Float
  attribute1        Float?
  attribute2        Float?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  CustomerInfo      CustomerInfo @relation(fields: [customer_id], references: [customer_id],onDelete: Cascade) 
  MasterJewelType   MasterJewelType @relation(fields: [masterJewel_id], references: [master_jewel_id],onDelete: Cascade)
 
  @@map("master_jewel_type_customer_value") 
}
 
model MasterJewelItemMapper{
   id                 Int      @id @default(autoincrement())
   item_id            Int
   master_jewel_id    Int
   created_at         DateTime @default(now())
   updated_at         DateTime @updatedAt
   MasterJewelType    MasterJewelType @relation(fields: [master_jewel_id], references: [master_jewel_id],onDelete: Cascade)
   Item               Item?@relation(fields: [item_id], references: [item_id])  
   @@map("masterjewelItemMapper") 
}
model Balance{
  balance_id              Int @id @default(autoincrement())
  order_id                Int 
  customer_id             Int
  gold_weight             Float
  gold_touch              Float
  gold_pure               Float
  remaining_gold_balance  Float
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  CustomerInfo            CustomerInfo @relation(fields: [customer_id], references: [customer_id],onDelete: Cascade) 
  MasterOrder             MasterOrder @relation(fields: [order_id], references: [id],onDelete: Cascade)
 
}
model ClosingBalance{
  id                Int @id @default(autoincrement())
  customer_id       Int @unique
  closing_balance   Float
  CustomerInfo      CustomerInfo @relation(fields: [customer_id], references: [customer_id],onDelete: Cascade) 
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}
model ScarpInfo {
  id             Int       @id @default(autoincrement())
  lot_id         Int
  process_id     Int
  scarpDate      String 
  itemTotal      Int
  scarp          Float
  touch          Float?
  cuttingScarp   Float?
  totalScarp     Float
  LotInfo        LotInfo?  @relation(fields: [lot_id], references: [id]) 

  @@unique([lot_id, process_id]) // âœ… composite unique index
  @@map("scarpInfo")
}

model Receipt {
  receipt_id     Int      @id @default(autoincrement())
  customer_id    Int
  date           DateTime
  goldRate       Float
  givenGold      Float
  touch          Float
  purityWeight   Float
  amount         Float

  customer       CustomerInfo @relation(fields: [customer_id], references: [customer_id],onDelete: Cascade)
  @@map("receipt")
}
model CustomerBalance{
  id                Int @id @default(autoincrement())
  customer_id       Int @unique
  expure            Float?
  balance           Float?
  customer          CustomerInfo @relation(fields: [customer_id], references: [customer_id],onDelete: Cascade)
  @@map("customerBalance")
}
